REGISTER '/home/cloudera/Desktop/elephant-bird-hadoop-compat-4.1.jar';
REGISTER '/home/cloudera/Desktop/elephant-bird-pig-4.1.jar';
REGISTER '/home/cloudera/Desktop/json-simple-1.1.1.jar';

load_tweets = LOAD '/home/cloudera/Desktop/Projects/Twitter/FlumeData.1453125784129' USING com.twitter.elephantbird.pig.load.JsonLoader('-nestedLoad') AS  myMap;


/*load_tweets = LOAD '/user/cloudera/flume/tweetdata' USING com.twitter.elephantbird.pig.load.JsonLoader('-nestedLoad') AS  myMap;*/

dump load_tweets;

extract_details = FOREACH load_tweets GENERATE myMap#'id' as id,myMap#'text' as text;

dump extract_details;

tokens = foreach extract_details generate id,text, FLATTEN(TOKENIZE(text)) As word;

dictionary = load '/home/cloudera/Desktop/Projects/Twitter/AFINN.txt' using PigStorage('\t') AS(word:chararray,rating:int);

dump dictionary;

word_rating = join tokens by word left outer, dictionary by word using 'replicated';

describe word_rating;

rating = foreach word_rating generate tokens::id as id,tokens::text as text, dictionary::rating as rate;

describe rating;

word_group = group rating by (id,text);

avg_rate = foreach word_group generate group, AVG(rating.rate) as tweet_rating;

positive_tweets = filter avg_rate by tweet_rating>=0;

dump positive_tweets;



